<?xml version="1.0" encoding="utf-8"?>
<!---
	This component contains the trail bar and the related buttons and text.
	The properties <code>programItem</code> and <code>session</code> must 
	be set in order for this to build the display.
-->
<s:HGroup xmlns:fx="http://ns.adobe.com/mxml/2009" 
		  xmlns:s="library://ns.adobe.com/flex/spark" 
		  xmlns:components="components.*"
		  xmlns:trialBar="components.trialBar.*"
		  gap="10" 
		  creationComplete="this_creationCompleteHandler(event)">
	
	<fx:Metadata>
		/** 
		* The component dispatches the trialPlus event 
		* when the plus button is pressed. 
		* 
		*  @eventType components.trialBar.TrialEvent 
		*/ 
		[Event(name="trialPlus", type="components.trialBar.TrialEvent")]
		/** 
		* The component dispatches the trialMinus event 
		* when the minus button is pressed. 
		* 
		*  @eventType components.trialBar.TrialEvent 
		*/ 
		[Event(name="trialMinus", type="components.trialBar.TrialEvent")]
	</fx:Metadata>
	<fx:Script>
		<![CDATA[
			import db.DBSitting;
			
			import mx.events.FlexEvent;
			import mx.rpc.events.FaultEvent;
			
			import pd.CustomEvent;
			import pd.Program;
			import pd.ProgramItem;
			import pd.Session;
			import pd.Sitting;
			import pd.Undo.DataChangeEvent;
			
			private var creationCompleted:Boolean = false;
			
			public var sittingsGroupedBySession:Array;
			public var currentSessionIndex:uint;
			
			protected function this_creationCompleteHandler(event:FlexEvent):void
			{
				creationCompleted = true;
				setUpSittingArray();
			}
			
			private var _programItem:ProgramItem;

			public function get programItem():ProgramItem
			{
				return _programItem;
			}

			public function set programItem(value:ProgramItem):void
			{
				_programItem = value;
				//trace(value.sittings);
				setUpSittingArray();
			}
			
			private var _session:Session;

			public function get session():Session
			{
				return _session;
			}

			public function set session(value:Session):void
			{
				_session = value;
				setUpSittingArray();
			}
			
			private var _sitting:Sitting;

			public function get sitting():Sitting
			{
				return _sitting;
			}

			public function set sitting(value:Sitting):void
			{
				_sitting = value;
			}


			private function setUpSittingArray():void
			{
				if(programItem != null && session != null && creationCompleted)
				{
					sittingsGroupedBySession = new Array();
					
					if(programItem == programItem.program.currentItem)
					{
						sitting = new Sitting(-1, programItem, session, new Date(), "");
						sitting.addEventListener(Sitting.TRIALS_CHANGE_UNDOREDO, trialsChangeUndoRedoResponse);
						programItem.sittings.push(sitting);
					}
					
					sittingsGroupedBySession = SortingClass.sortSittingsBySession(programItem.sittings);
					// at this point sittingsGroupedBySession is sorted so
					// there are arrays of arrays in order of oldest to 
					// newest with array
					
					// sets currentSessionIndex to the end of the array, aka the
					// most recent.
					currentSessionIndex = sittingsGroupedBySession.length - 1;
					initButtons();
					initListBar();
				}
			}
			
			protected function initButtons():void
			{
				//
				// Left Buttons
				//
				if(currentSessionIndex > 0)
				{
					if(leftArrows.width == 0)
					{
						leftArrows.width = NaN;
						leftArrows.invalidateSize();
						leftArrows.width = leftArrows.measuredWidth;
					}
					if(currentSessionIndex > 1)
					{
						if(leftSingleArrow.height == 0)
						{
							leftSingleArrow.height = NaN;
							leftSingleArrow.invalidateSize();
							leftSingleArrow.percentHeight = 50;
							leftDoubleArrow.height = NaN;
							leftDoubleArrow.invalidateSize();
							leftDoubleArrow.percentHeight = 50;
						}
					}
					else 
					{
						leftSingleArrow.height = 0;
						leftDoubleArrow.percentHeight = 100;
					}
				}
				else
				{
					leftArrows.width = 0;
				}
				//
				// Right buttons
				//
				if(sittingsGroupedBySession.length - currentSessionIndex > 1)
				{
					plusButton.width = 0;
					minusButton.width = 0;
					
					if(rightArrows.width == 0)
					{
						rightArrows.width = NaN;
						rightArrows.invalidateSize();
						rightArrows.width = rightArrows.measuredWidth;
					}
					if(sittingsGroupedBySession.length - currentSessionIndex > 2)
					{
						if(rightSingleArrow.height == 0)
						{
							rightSingleArrow.height = NaN;
							rightSingleArrow.invalidateSize();
							rightSingleArrow.percentHeight = 50;
						}
					}
					else 
					{
						rightSingleArrow.height = 0;
						rightDoubleArrow.percentHeight = 100;
					}
				}
				else
				{
					rightArrows.width = 0;
					if(plusButton.width == 0)
					{
						plusButton.width = NaN;
						plusButton.invalidateSize();
						plusButton.width = plusButton.measuredWidth;
						
						minusButton.width = NaN;
						minusButton.invalidateSize();
						minusButton.width = minusButton.measuredWidth;
					}
				}
			}
			
			protected function initListBar():void
			{
				trialBarList.clear();
				
				if(currentSessionIndex >= sittingsGroupedBySession.length)
					currentSessionIndex = sittingsGroupedBySession.length -1;
				var selectedSessionArray:Array = sittingsGroupedBySession[currentSessionIndex];
				for (var i:uint = 0; i < selectedSessionArray.length; i++)
				{
					var _sittingTrials:String = selectedSessionArray[i].trials;
					for (var j:uint = 0; j < _sittingTrials.length; j++)
					{
						trialBarList.addTrialBarItem((_sittingTrials.charAt(j) == "1"), j == 0);
					}
				}
				
				if(DateFunctions.sameDay(selectedSessionArray[0].time, new Date()))
					dateLabel.text = "Today - ";
				else
					dateLabel.text = DateFunctions.toAmericanString(selectedSessionArray[0].time) + " - ";
				
				sessionLabel.text = "Session " + selectedSessionArray[0].session.index;
			}
			
			protected function plusButton_clickHandler(event:MouseEvent):void
			{
				trialBarList.addTrialBarItem(true, sitting.trials.length == 0);
				dispatchEvent(new DataChangeEvent(sitting.newSuccess()));
				dispatchEvent(new TrialEvent(TrialEvent.TRIAL_PLUS, true));
			}
			
			protected function minusButton_clickHandler(event:MouseEvent):void
			{
				trialBarList.addTrialBarItem(false, sitting.trials.length == 0);
				dispatchEvent(new DataChangeEvent(sitting.newFailure()));
				dispatchEvent(new TrialEvent(TrialEvent.TRIAL_MINUS, true));
			}
			
			protected function rightSingleArrow_clickHandler(event:MouseEvent):void
			{
				currentSessionIndex += 1;
				initButtons();
				initListBar();
			}
			
			protected function rightDoubleArrow_clickHandler(event:MouseEvent):void
			{
				currentSessionIndex = sittingsGroupedBySession.length -1;
				initButtons();
				initListBar();
			}
			
			protected function leftSingleArrow_clickHandler(event:MouseEvent):void
			{
				currentSessionIndex -= 1;
				initButtons();
				initListBar();
			}
			
			protected function leftDoubleArrow_clickHandler(event:MouseEvent):void
			{
				currentSessionIndex = 0;
				initButtons();
				initListBar();
			}
			
			public function lock():void
			{
				plusButton.enabled = false;
				minusButton.enabled = false;
			}
			
			public function unlock():void
			{
				plusButton.enabled = true;
				minusButton.enabled = true;
			}
			
			protected function addSittingFaultEvent(event:FaultEvent):void
			{
				trace(event.message);
			}
			
			protected function addSittingResult(event:Event):void
			{
				// TODO Auto-generated method stub
				
			}
			
			protected function trialsChangeUndoRedoResponse(event:Event):void
			{
				if((event.target as Sitting).programItem == programItem)
				{
					currentSessionIndex = sittingsGroupedBySession.length - 1;
					initButtons();
					initListBar();
				}
			}
			
		]]>
	</fx:Script>
	<fx:Declarations>
		<!-- Place non-visual elements (e.g., services, value objects) here -->
	</fx:Declarations>
	<s:VGroup gap="0" height="100%" id="leftArrows" clipAndEnableScrolling="true">
		<components:SkinnableButton imageSource="{R.leftSingleArrow}" 
									height="100%" width="48" id="leftSingleArrow"
									click="leftSingleArrow_clickHandler(event)"/>
		<components:SkinnableButton imageSource="{R.leftDoubleArrow}" 
									height="100%" width="48" id="leftDoubleArrow"
									click="leftDoubleArrow_clickHandler(event)"/>
	</s:VGroup>
	<s:Group width="100%" height="100%">
		<s:HGroup top="6">
			<s:Label id="dateLabel"/>
			<s:Label id="sessionLabel"/>
		</s:HGroup>
		
		
		<!-- bar here -->
		<s:Group height="64" right="{plusButton.width + 6}" left="0" verticalCenter="0">
			<trialBar:TrialBarList left="0"
								   top="6" bottom="6" height="30" 
								   id="trialBarList"/>
		</s:Group>
		
		<!-- plus minus buttons here -->
		<s:VGroup gap="0" height="100%" width="100%" right="0" horizontalAlign="right"
				  paddingTop="6" paddingRight="0" paddingBottom="6">
			<components:SkinnableButton imageSource="{R.plusIcon}" id="plusButton"
										height="50%" width="84" 
										click="plusButton_clickHandler(event)"/>
			<s:Rect width="100%" height="3">
				<s:stroke>
					<s:SolidColorStroke color="0xcecece"/>
				</s:stroke>
				<s:fill>
					<s:LinearGradient>
						<s:GradientEntry color="0x505050"/>
						<s:GradientEntry color="0xb8b8b8"/>
					</s:LinearGradient>
				</s:fill>
			</s:Rect>
			<components:SkinnableButton imageSource="{R.minusIconWShaddow}"
										id="minusButton" height="50%" width="84"
										click="minusButton_clickHandler(event)"/>
		</s:VGroup>
		
	</s:Group>
	<s:VGroup gap="0" height="100%" id="rightArrows" width="0" clipAndEnableScrolling="true">
		<components:SkinnableButton imageSource="{R.rightSingleArrow}" 
									height="50%" width="48" id="rightSingleArrow"
									click="rightSingleArrow_clickHandler(event)"/>
		<components:SkinnableButton imageSource="{R.rightDoubleArrow}" 
									height="50%" width="48" id="rightDoubleArrow"
									click="rightDoubleArrow_clickHandler(event)"/>
	</s:VGroup>
</s:HGroup>